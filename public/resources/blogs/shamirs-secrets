<p>Sometimes, secrets need to be shared among groups of less-than-trustworthy people. For this reason, it can be useful to have some mechanism in place such that the secret can only be recovered if at least some threshold number of said people are present. Shamir’s Secret Sharing Algorithm is a method devised by Adi Shamir to implement such guarantees.

Shamir’s Secret Sharing Algorithm does 3 important things:</p>
<ol>
  <li>It allows keys to be distributed among any number of participants.</li>
  <li>It allows the secret to be recovered so long as at least k participants are involved, where k is some predetermined value.</li>
  <li>It ensures that having a key makes a participant no better informed on the contents of the secret than someone who does not have a key.</li>
</ol>
<h4>How Does this Work?</h4>
<p>Thinking back to middle school math class, you may remember problems from geometry in which you would use two given points to find the equation of a line. Lines are really just a special case of a polynomial; specifically the case where the degree of said polynomial equals 1. In general a polynomial of degree n is uniquely determined by n+1 points, but any polynomial contains an infinite number of points. Conveniently, there will always be an infinite number of degree n polynomials that fit any collection of p < n+1 points, so knowing some number of keys less than the threshold value is not enough to glean useful information. By encoding a secret in a polynomial, we can distribute any number of points on the polynomial as keys, which can later be used to recover the polynomial. Here if it is determined that the secret should require k keys to unlock, a polynomial of degree k-1 is selected.</p>
<h4>Storing the Secret</h4>
<p>Encoding the secret is very simple. Pick any polynomial of the desired degree which intercepts the origin (i.e. has no constant term).  Then, convert the secret to an integer. It doesn’t matter how this is done as long as the intended recipients know how to reverse the process. The secret can then be added to the selected polynomial as the constant term, making it the y-intercept. Once keyholders recover the polynomial, they will easily be able to locate and interpret the value.</p>
<h4>Example</h4>
<p>Consider I have a secret password that opens a magical vault. I want to ensure the secret is only recoverable when the majority of a 4 person council is present. Therefore, I’d like to require the cooperation of at least 3/4 key-holders to unlock it. I then must pick a polynomial of the form ax^2 + bx + key, where a, b can have any values. For this example set a = 6969696969, b = 133713371337. To generate the 4 keys, we can pick any values x1, x2, x3, x4 and calculate the corresponding y1, y2, y3, y4.</p>
<div class='code-block'>
<code>
SECRET = 'top secret information'

def f(x):
    return 6969696969*(x*x) + 133713371337*x + int(SECRET.encode().hex(), 16)

X = [hash(rand(10000)) for i in range(4)]
Y = [f(xi) for xi in X]
keys = zip(X, Y)
print(tuple(keys))

>>> [(1041682629927242797726055, 7562880573262894095466011954339664658391554052754807307014), 
(532558609947443076176592, 1976779769382522991004068156308289342615273131150830333374), 
(407948924373199520814620, 1159956737029734346575290888825883140211958662570907820794), 
(780658161969035615807160, 4247566234262585342089297581285933171777864726754301889574)]
</code>
</div>
